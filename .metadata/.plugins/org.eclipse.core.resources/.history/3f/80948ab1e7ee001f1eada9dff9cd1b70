package com.wipro.registrationservice.service;

import java.time.LocalDate;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.registrationservice.entity.Registration;
import com.wipro.registrationservice.exception.ResourceNotFoundException;
import com.wipro.registrationservice.model.CourseDTO;
import com.wipro.registrationservice.model.CourseRegistrationDTO;
import com.wipro.registrationservice.model.StudentDTO;
import com.wipro.registrationservice.repository.RegistrationRepository;

@Service
public class RegistrationServiceImpl implements RegistrationService {

    @Autowired
    private RegistrationRepository registrationRepository;

    @Autowired
    private StudentApiClient studentApiClient;

    @Autowired
    private CourseApiClient courseApiClient;

    @Override
    public Registration registerStudent(Registration registration) {
        // Fetch course details
        CourseDTO course = courseApiClient.getCourseDetails(registration.getCourseId());

        // Initialize values
        double feesPaid = registration.getFeesPaid();
        double courseFees = course.getCourseFees();
        double feesPending = courseFees - feesPaid;

        // Set values in registration object
        registration.setDateOfRegistration(LocalDate.now());
        registration.setFeesPending(feesPending);
        registration.setStatus("Enrolled");

        // Save to repository
        return registrationRepository.save(registration);
    }

    @Override
    public Registration getRegistrationById(int registrationId) {
        Optional<Registration> optionalRegistration = registrationRepository.findById(registrationId);

        if (optionalRegistration.isPresent()) {
            return optionalRegistration.get();
        } else {
            throw new ResourceNotFoundException("Registration not found with ID: " + registrationId);
        }
    }

    @Override
    public CourseRegistrationDTO getFullRegistrationDetails(int registrationId) {
        // Fetch registration details
        Registration registration = getRegistrationById(registrationId);

        // Fetch student and course details
        StudentDTO student = studentApiClient.getStudentDetails(registration.getStudentId());
        CourseDTO course = courseApiClient.getCourseDetails(registration.getCourseId());

        // Create and return DTO
        CourseRegistrationDTO courseRegistrationDTO = new CourseRegistrationDTO();
        courseRegistrationDTO.setRegistration(registration);
        courseRegistrationDTO.setStudent(student);
        courseRegistrationDTO.setCourse(course);

        return courseRegistrationDTO;
    }
}
