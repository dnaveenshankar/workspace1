package com.wipro.registrationservice.service;

import java.time.LocalDate;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.registrationservice.entity.Registration;
import com.wipro.registrationservice.exception.ResourceNotFoundException;
import com.wipro.registrationservice.model.CourseDTO;
import com.wipro.registrationservice.model.CourseRegistrationDTO;
import com.wipro.registrationservice.model.StudentDTO;
import com.wipro.registrationservice.repository.RegistrationRepository;

@Service
public class RegistrationServiceImpl implements RegistrationService {

    @Autowired
    private RegistrationRepository registrationRepository;

    @Autowired
    private StudentApiClient studentApiClient;

    @Autowired
    private CourseApiClient courseApiClient;

    @Override
    public Registration registerStudent(Registration registration) {
        int courseId = registration.getCourseId();
        
        CourseDTO course = courseApiClient.getCourseDetails(courseId);
        
        double courseFees = course.getCourseFees();
        double feesPaid = registration.getFeesPaid();
        double feesPending = courseFees - feesPaid;
        
        registration.setDateOfRegistration(LocalDate.now());
        registration.setFeesPending(feesPending);
        registration.setStatus("Enrolled");
        
        return registrationRepository.save(registration);
    }

    @Override
    public Registration getRegistrationById(int registrationId) {
        Optional<Registration> optionalRegistration = registrationRepository.findById(registrationId);

        if (optionalRegistration.isPresent()) {
            return optionalRegistration.get();
        } else {
            throw new ResourceNotFoundException("Registration not found with ID: " + registrationId);
        }
    }

    @Override
    public CourseRegistrationDTO getFullRegistrationDetails(int registrationId) {
        Registration registration = getRegistrationById(registrationId);
        
        CourseRegistrationDTO registrationDTO = new CourseRegistrationDTO();
        
        registrationDTO.setRegistrationId(registration.getRegistrationId());
        registrationDTO.setDateOfRegistration(registration.getDateOfRegistration());
        registrationDTO.setFeesPaid(registration.getFeesPaid());
        registrationDTO.setFeesPending(registration.getFeesPending());
        registrationDTO.setStatus(registration.getStatus());

        int studentId = registration.getStudentId();
        Optional<StudentDTO> optionalStudent = Optional.ofNullable(studentApiClient.getStudentDetails(studentId));

        if (optionalStudent.isPresent()) {
            registrationDTO.setStudent(optionalStudent.get());
        } else {
            throw new ResourceNotFoundException("Student not found with ID: " + studentId);
        }

        int courseId = registration.getCourseId();
        Optional<CourseDTO> optionalCourse = Optional.ofNullable(courseApiClient.getCourseDetails(courseId));

        if (optionalCourse.isPresent()) {
            registrationDTO.setCourse(optionalCourse.get());
        } else {
            throw new ResourceNotFoundException("Course not found with ID: " + courseId);
        }

        return registrationDTO;
    }
}
