package com.wipro.registrationservice.service;

import java.time.LocalDate;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.registrationservice.entity.Registration;
import com.wipro.registrationservice.exception.ResourceNotFoundException;
import com.wipro.registrationservice.model.CourseDTO;
import com.wipro.registrationservice.model.CourseRegistrationDTO;
import com.wipro.registrationservice.model.StudentDTO;
import com.wipro.registrationservice.repository.RegistrationRepository;

@Service
public class RegistrationServiceImpl implements RegistrationService {

    @Autowired
    private RegistrationRepository registrationRepository;

    @Autowired
    private StudentApiClient studentApiClient;

    @Autowired
    private CourseApiClient courseApiClient;

    @Override
    public Registration registerStudent(Registration registration) {
        
        int studentId = registration.getStudentId();
        int courseId = registration.getCourseId();
        double feesPaid = registration.getFeesPaid();

        LocalDate currentDate = LocalDate.now();
        registration.setDateOfRegistration(currentDate);

        CourseDTO course = courseApiClient.getCourseDetails(courseId);
        double courseFees = course.getCourseFees();

        double feesPending = 0;
        feesPending = courseFees - feesPaid;
        registration.setFeesPending(feesPending);

        String status = "Enrolled";
        registration.setStatus(status);

        return registrationRepository.save(registration);
    }

    @Override
    public Registration getRegistrationById(int registrationId) {
        Optional<Registration> optionalRegistration = registrationRepository.findById(registrationId);
        
        if (optionalRegistration.isEmpty()) {
            throw new ResourceNotFoundException("Registration not found with ID: " + registrationId);
        }

        Registration registration = optionalRegistration.get();
        return registration;
    }

    @Override
    public CourseRegistrationDTO getFullRegistrationDetails(int registrationId) {
        Registration registration = getRegistrationById(registrationId);

        int studentId = registration.getStudentId();
        int courseId = registration.getCourseId();

        StudentDTO student = studentApiClient.getStudentDetails(studentId);
        CourseDTO course = courseApiClient.getCourseDetails(courseId);

        CourseRegistrationDTO courseRegistrationDTO = new CourseRegistrationDTO();
        
        courseRegistrationDTO.setRegistration(registration);
        courseRegistrationDTO.setStudent(student);
        courseRegistrationDTO.setCourse(course);

        return courseRegistrationDTO;
    }
}
